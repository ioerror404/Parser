package gui;



import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author Rabi
 */
public class Panel extends javax.swing.JFrame {

    private char[] nt;
    private String[][] grmr;
    private char[] t;
    private String[] fst;
    private String[] flw;

    /**
     * Creates new form Panel
     */
    public Panel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jfst = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jflw = new javax.swing.JEditorPane();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compiler Construction");
        setBackground(new java.awt.Color(44, 62, 80));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel3.setText("First-Follow");

        jEditorPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Enter Grammar")));
        jScrollPane2.setViewportView(jEditorPane2);

        jfst.setEditable(false);
        jfst.setBackground(new java.awt.Color(255, 255, 255));
        jfst.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "First"));
        jfst.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jfst.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jfst.setEnabled(false);
        jScrollPane1.setViewportView(jfst);

        jflw.setBackground(new java.awt.Color(255, 255, 255));
        jflw.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Follow"));
        jflw.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jflw.setEnabled(false);
        jScrollPane3.setViewportView(jflw);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.setActionCommand("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(380, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        setBounds(300, 5, 803, 433);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        nt = new char[100];
        grmr = new String[20][20];
        t = new char[100];
        fst = new String[100];
        flw = new String[100];
        
        try{
            jflw.setText("");
            jfst.setText("");
            String xx = jEditorPane2.getText();
            int l = 0;
            for (char c : xx.toCharArray()) {
                if (c == ';') {
                    l++;
                }
            }
            nt = new char[l];
            grmr = new String[l][];

            int gc = 0;
            boolean isStart = true;
            boolean isGstart = false;
            int count = 0;
            for (char c : xx.toCharArray())
            {
                if(c==' ')
                    continue;
                if (isStart) {
                    boolean isExist = false;
                    for (char cc : nt) {
                        if (c == cc) {
                            isExist = true;
                        }
                    }
                    if (!isExist) {
                        nt[count] = c;
                        count++;
                    }
                    isStart = false;
                }
                if (c == ';')
                    isStart = true;
            }

            for (int i = 0; i < nt.length; i++)
            {
                char c = nt[i];
                int len = 0;
                StringTokenizer st = new StringTokenizer(xx,";");
                while (st.hasMoreTokens())
                {
                    if(st.nextToken().toCharArray()[0]==c)
                    len++;
                }
                grmr[i] = new String[len];
                st = new StringTokenizer(xx,";");
                int coun = 0;
                while (st.hasMoreTokens())
                {
                    char tok[] = st.nextToken().toCharArray();
                    if(tok[0]==c)
                    {
                        for(int j=2;j<tok.length;j++)
                        {
                            if(tok[j]==' ')
                                continue;
                            if(j==2)
                                grmr[i][coun] = "";
                            grmr[i][coun]+=tok[j];
                        }
                        coun++;
                    }
                }
            }
            char temp[] = new char[count];
            for (int i = 0; i < count; i++) {
                temp[i] = nt[i];
            }

            nt = temp;
            count = 0;
            t = new char[100];

            for(String s[]:grmr)
            {
                for(String ss:s)
                {
                    for(char c1 : ss.toCharArray())
                    {
                        if(c1==' ')
                        continue;
                        boolean isExist = false;
                        for(char c2 : nt)
                        {
                            if(c1==c2)
                            isExist = true;
                        }
                        for(char c2 : t)
                        {
                            if(c1==c2)
                            isExist = true;
                        }
                        if(!isExist && c1!='-')
                        {
                            t[count] = c1;
                            count++;
                        }
                    }
                }
            }
            temp = new char[count];
            for (int i = 0; i < count; i++) {
                temp[i] = t[i];
            }
            t = temp;

            fst=new String[nt.length];
            for(int i=0;i<nt.length;i++)
            fst[i]=first(i);

            flw=new String[nt.length];
            for(int i=0;i<nt.length;i++)
                flw[i]=follow(i);

            for(String s : fst)
                jfst.setText(jfst.getText()+removeDuplicates(s)+"\n");

            for(String s : flw)
                jflw.setText(jflw.getText()+removeDuplicates(s)+"\n");
    }//GEN-LAST:event_jButton1ActionPerformed
        catch(Exception e){
          JOptionPane.showMessageDialog(this, "Grammer is Invaild","Error",HEIGHT);
        }
    }
     String first(int i)
{
    int j,k,l=0,found=0;
    String temp="",str="";
    for(j=0;j<grmr[i].length;j++) //number of productions
    {
        for(k=0;k<grmr[i][j].length();k++,found=0) //when nonterminal has epsilon production
        {
            for(l=0;l<nt.length;l++) //finding nonterminal
            {
                if(grmr[i][j].charAt(k)==nt[l]) //for nonterminal in first set
                {
                    str=first(l);
                    if(!(str.length()==1 && str.charAt(0)=='9')) //when epsilon production is the only nonterminal production
                        temp=temp+str;
                    found=1;
                    break;
                }
            }
            if(found==1)
            {
                if(str.contains("9")) //here epsilon will lead to next nonterminal’s first set
                    continue;
            }
            else //if first set includes terminal
                temp=temp+grmr[i][j].charAt(k);
            break;
        }
    }
    return temp;
    
}
 String follow(int i)
{
    char pro[],chr[];
    String temp="";
    int j,k,l,m,n,found=0;
    if(i==0)
        temp="$";
    for(j=0;j<nt.length;j++)
    {
        for(k=0;k<grmr[j].length;k++) //entering grammar matrix
        {
            pro=new char[grmr[j][k].length()];
            pro=grmr[j][k].toCharArray();
            for(l=0;l<pro.length;l++) //entering each production
            {
                    if(pro[l]==nt[i]) //finding the nonterminal whose follow set is to be found
                    {
                        if(l==pro.length-1) //if it is the last terminal/non-terminal then follow of current non-terminal
                        {
                            if(j<i)
                                temp=temp+flw[j];
                        }
                        else
                        {
                            for(m=0;m<nt.length;m++)
                            {
                                if(pro[l+1]==nt[m]) //first of next non-terminal otherwise (else later…)
                                {
                                    chr=new char[fst[m].length()];
                                    chr=fst[m].toCharArray();
                                    for(n=0;n<chr.length;n++)
                                    {
                                        if(chr[n]=='9') //if first includes epsilon
                                        {
                                            if(l+1==pro.length-1)
                                                temp=temp+follow(j); //when non-terminal is second last
                                            else
                                                temp=temp+follow(m);
                                        }
                                        else
                                           temp=temp+chr[n]; //include whole first set except epsilon
                                    }
                                    found=1;
                                }
                            }
                            if(found!=1)
                                temp=temp+pro[l+1]; //follow set will include terminal(else is here)
                        }
                    }
            }
        }
    }
    return temp;

}
 String removeDuplicates(String str)
{
    int i;  
    char ch;
    boolean seen[] = new boolean[256];
    StringBuilder sb = new StringBuilder(seen.length);
    for(i=0;i<str.length();i++)
        {
        ch=str.charAt(i);
        if (!seen[ch])
        {
            seen[ch] = true;
            sb.append(ch);
        }
    }
    return sb.toString();
}
   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Panel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JEditorPane jflw;
    private javax.swing.JEditorPane jfst;
    // End of variables declaration//GEN-END:variables
}
